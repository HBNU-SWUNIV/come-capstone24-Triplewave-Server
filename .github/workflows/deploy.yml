# workflow의 이름 지정
name: BackEnd - CI/CD

on:
  push:
    # main branch에 push(merge)될 경우 실행
    branches: [ "main" ]

jobs:
  build:
    # build를 실행할 운영체제
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: | 
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 프로젝트 저장소에 업로드하면 안되는 설정 파일들을 만들어줍니다.
      - name: Make application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION }}" > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_COMMON }}" > src/main/resources/application-common.yml
          echo "${{ secrets.APPLICATION_PROD }}" > src/main/resources/application-prod.yml
          find src
          
          # 등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
          echo "$APPLICATION" > ./application.yml
          echo "$APPLICATION_COMMON" > ./application-common.yml
          echo "$APPLICATION_PROD" > ./application-prod.yml

        env:
          APPLICATION_COMMON : ${{ secrets.APPLICATION_COMMON }}
          APPLICATION_PROD : ${{ secrets.APPLICATION_PROD }}

        shell: bash

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar
        # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.

      - name: zip file 생성
        run: |
          mkdir deploy
          cp ./docker/Dockerfile ./deploy/
          cp ./docker/docker-compose.blue.yml ./deploy/
          cp ./docker/docker-compose.green.yml ./deploy/          
          cp ./appspec.yml ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy

      # script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3에 프로젝트를 업로드 합니다.
      - name: S3에 프로젝트 업로드
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          ./spring-build.zip s3://capstone-delivery-bucket


      # CodeDelploy에 배포를 요청합니다.
      - name: Code Deploy 배포 요청
        run: aws deploy create-deployment --application-name capstone-delivery
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name capstone-delivery-group
          --s3-location bucket=capstone-delivery-bucket,bundleType=zip,key=spring-build.zip

      # 배포 성공 & 실패 여부를 Slack 알람으로 발송합니다.
      - name: Slack 알람 발송
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 배포 결과 => ${{ job.status }}
          SLACK_TITLE: 배포 결과 알람
          SLACK_USERNAME: Notification-Bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        # 이 구문을 추가해야 빌드 성공 실패와 상관없이 동작합니다.
        if: always()
